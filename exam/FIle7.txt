Так же, как в HTML есть теги, в CSS есть "селекторы". Селекторы – это имена стилей, которые вы определяете во внутренних или внешних таблицах стилей





Селекторы индефикаторов и классов.

Хоть мы и можем применять HTML селекторы, как имена тегов. Однако возможность также определять селекторы классов и идентификаторов. Преимущества подобных селекторов состоит в том, что можно иметь одни и те же элементы HTML, но применять к ним разные стили в зависимости от их класса или идентификатора.

CSS селектор класса определяется при помощи произвольного имени, перед которым ставится точка (.), а селектор идентификатора - при помощи произвольного имени, перед которым ставится символ решетки (#).

Example: 

#top {
   background-color: #ccc;
   padding: 1em
}

.intro {
   color: red;
   font-weight: bold;
}

Разница между идентификатором и классом состоит в том, что идентификатор может присваиваться только одному элементу, а класс – скольким угодно элементам.







Селекторы атрибутов.

Многие теги различаются по своему действию в зависимости от того, какие в них используются атрибуты.
Например, тег <input> может создавать кнопку, текстовое поле и другие элементы формы всего лишь за счёт изменения значения атрибута type. При этом добавление правил стиля к селектору INPUT применит стиль одновременно ко всем созданным с помощью этого тега элементам. Чтобы гибко управлять стилем подобных элементов, в CSS введены селекторы атрибутов. Они позволяют установить стиль по присутствию определённого атрибута тега или его значения.

Grammar: 

1) [атрибут] { Описание правил стиля } ко всем тегам с атрибутом таким
Селектор[атрибут] { Описание правил стиля } 

Пробел до квадратных скобок ставить нельзя


Ещё небольшое расширение
2) Устанавливает стиль для элемента в том случае, если задано определённое значение специфичного атрибута.

[атрибут="значение"] { Описание правил стиля }
Селектор[атрибут="значение"] { Описание правил стиля }

И ещё для разнообразия

3) Устанавливает стиль для элемента в том случае, если значение атрибута тега начинается с указанного текста.

[атрибут^="значение"] { Описание правил стиля }
Селектор[атрибут^="значение"] { Описание правил стиля }

Использование кавычек не обязательно, но только если значение содержит латинские буквы и без пробелов


Пример: на сайте требуется разделить стиль обычных и внешних ссылок — ссылки, которые ведут на другие сайты. Чтобы не вводить в тег <a> новый класс, воспользуемся селекторами атрибутов.

4) Устанавливает стиль для элемента в том случае, если значение атрибута оканчивается указанным текстом

[атрибут$="значение"] { Описание правил стиля }
Селектор[атрибут$="значение"] { Описание правил стиля }

5) Устанавливает стиль для элемента в том случае, если значение атрибута содержит указанный текст

[атрибут*="значение"] { Описание правил стиля }
Селектор[атрибут*="значение"] { Описание правил стиля }


6) Некоторые значения атрибутов могут перечисляться через пробел.
Например имена классов.

[атрибут~="значение"] { Описание правил стиля }
Селектор[атрибут~="значение"] { Описание правил стиля }


7) В именах идентификаторов и классов разрешено использовать символ дефиса (-), что позволяет создавать значащие значения атрибутов id и class. Поэтому пользуемся данным синтаксисом
 
[атрибут|="значение"] { Описание правил стиля }
Селектор[атрибут|="значение"] { Описание правил стиля }

div[class|="block"] {
...
}


<div class="block-menu-therm">...


8) И под конец их можно комбинировать:

[атрибут1="значение1"][атрибут2="значение2"] { Описание правил стиля }
Селектор[атрибут1="значение1"][атрибут2="значение2"] { Описание правил стиля }








Множественные селекторы.

Хотим, чтобы все элементы, атрибут class которых имеет значение name, были полужирным шрифтом, а элементы, атрибут class которых surename, были выделены курсивом, а элементы, имеющие оба значения, получили серебряный фон. Это могло бы быть написано следующим образом:


Пример:

.name {font-weight: bold;}
.surename {font-style: italic;}
.name.surename {background: silver;}








Дочерние селекторы и селекторы соседей.











Единицы измерения
Размер устанавливается с помощью свойства font-size. Размер шрифта определяется как высота от базовой линии до верхней границы кегельной площадки.

Размер шрифта можно установить с помощью единиц измерения длины:

1) px — размер в пикселях. Так как задание динамического размера требуется нечасто, то используют px.

p {
	font-size: 10px;
}

2) em/% — размер шрифта в зависимости от размера шрифта родителя. Эти размеры – относительные, они определяются по текущему контексту.

div {
	font-size: .6em; /* то же, что и 60% */
}

3) rem(root em) — подобно em наследует значение, но только <html>.


4) Редко используемые единицы измерения длины в контексте шрифтов pc (пики), pt, ch, ex — типографские единицы измерения.

В вебе почти не нужны, испотзуются больше в типографии

5) cm, mm, q, in (дюймы) абсолютные единицы из реального мира

Для верстки печатных версий сайта к примеру

6) vh, vw, vmin, vmax — единицы измерения относительно viewport'а.

Данные единицы были в принципе придуманы не для того, чтобы работать со шрифтами.